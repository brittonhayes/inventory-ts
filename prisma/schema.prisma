// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  COMPLETE
  CANCELLED
}

enum Condition {
  MINT
  GOOD
  POOR
  NEEDS_REPLACEMENT
}

enum PowerType {
  GAS
  DIESEL
  ELECTRIC
  HYBRID
}

enum FuelType {
  DIESEL
  GAS
}

enum VehicleType {
  TRACTOR
  SPRAYER
  COMBINE
  TRUCK
  ATV
  UTV
  SEMITRUCK
  OTHER
}

enum ImplementType {
  SPRAYER
  HARROW
  DRILL
  MOWER
  CULTIVATOR
  CHISEL
  RODWEEDER
  TRAILER
  OTHER
}

enum FuelStorageType {
  TANK
  CAN
  OTHER
}

model FuelEvent {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  gallons       Int?         @default(0)
  category      FuelType?    @default(DIESEL)
  fuelStorageId String?
  fuelStorage   FuelStorage? @relation(fields: [fuelStorageId], references: [id])
}

model FuelStorage {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String
  gallons     Int?            @default(0)
  capacity    Int?            @default(0)
  storageType FuelStorageType @default(TANK)
  category    FuelType?       @default(DIESEL)
  FuelEvent   FuelEvent[]
}

model Employee {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  tasks     MaintenanceTask[]
}

model VehiclePart {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  condition        Condition?
  hours            Int?
  notes            String?
  vehicles         Vehicle[]
  maintenanceGuide MaintenanceGuide[]
}

model Tool {
  id                String           @id @default(cuid())
  name              String?          @unique
  maintenanceTask   MaintenanceTask? @relation(fields: [maintenanceTaskId], references: [id])
  maintenanceTaskId String?
}

model MaintenanceGuide {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  content   String
  manual    String?
  parts     VehiclePart[]
  tasks     MaintenanceTask[]
  vehicle   Vehicle?          @relation(fields: [vehicleId], references: [id])
  vehicleId String?
}

model MaintenanceTask {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  status       TaskStatus        @default(PENDING)
  dueDate      DateTime
  startedAt    DateTime?
  completedAt  DateTime?
  name         String
  machineHours Int?
  notes        String?
  tools        Tool[]
  assigneeId   String?
  assignee     Employee?         @relation(fields: [assigneeId], references: [id])
  vehicle      Vehicle?          @relation(fields: [vehicleId], references: [id])
  vehicleId    String?
  guide        MaintenanceGuide? @relation(fields: [guideId], references: [id])
  guideId      String?
}

model Vehicle {
  id           String             @id @default(cuid())
  name         String?            @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  vin          String?            @unique
  year         Int?
  vehicleType  VehicleType
  make         String
  model        String
  machineHours Int?
  link         String?
  power        PowerType?         @default(DIESEL)
  tasks        MaintenanceTask[]
  guides       MaintenanceGuide[]
  parts        VehiclePart[]
  attachments  Attachment[]
  implement    Implement?         @relation(fields: [implementId], references: [id])
  implementId  String?
}

model Attachment {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  implement   Implement? @relation(fields: [implementId], references: [id])
  implementId String?
  vehicleId   String?
  vehicle     Vehicle?   @relation(fields: [vehicleId], references: [id])
}

model Implement {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  vehicles    Vehicle[]
  attachments Attachment[]
}
