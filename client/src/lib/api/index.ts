/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/vehicles": {
    get: operations["VehiclesController_listVehicles"];
    post: operations["VehiclesController_createVehicle"];
  };
  "/api/vehicles/{id}": {
    get: operations["VehiclesController_findVehicleById"];
    delete: operations["VehiclesController_deleteVehicle"];
    patch: operations["VehiclesController_updateVehicle"];
  };
  "/api/vehicles/parts": {
    get: operations["VehiclesController_listParts"];
    post: operations["VehiclesController_createPart"];
  };
  "/api/vehicles/parts/{id}": {
    get: operations["VehiclesController_findPartById"];
    delete: operations["VehiclesController_deletePart"];
    patch: operations["VehiclesController_updatePart"];
  };
  "/api/vehicles/{id}/implements": {
    get: operations["VehiclesController_getCompatibleImplements"];
  };
  "/api/vehicles/{id}/parts": {
    get: operations["VehiclesController_getCompatibleParts"];
  };
  "/api/implements": {
    get: operations["ImplementsController_listImplements"];
    post: operations["ImplementsController_createImplement"];
  };
  "/api/implements/{id}": {
    get: operations["ImplementsController_findImplementById"];
    delete: operations["ImplementsController_deleteImplement"];
    patch: operations["ImplementsController_updateImplement"];
  };
  "/api/tools": {
    get: operations["ToolsController_listTools"];
    post: operations["ToolsController_createTool"];
  };
  "/api/tools/{id}": {
    get: operations["ToolsController_findToolById"];
    delete: operations["ToolsController_deleteTool"];
    patch: operations["ToolsController_updateTool"];
  };
  "/api/employees": {
    get: operations["EmployeesController_listEmployees"];
    post: operations["EmployeesController_createEmployee"];
  };
  "/api/employees/{id}": {
    get: operations["EmployeesController_findEmployeeById"];
    delete: operations["EmployeesController_deleteEmployee"];
    patch: operations["EmployeesController_updateEmployee"];
  };
  "/api/maintenance/guides": {
    get: operations["MaintenanceController_listGuides"];
    post: operations["MaintenanceController_createGuide"];
  };
  "/api/maintenance/guides/vehicle/{id}": {
    get: operations["MaintenanceController_findGuideByVehicle"];
  };
  "/api/maintenance/guides/{id}/tasks": {
    get: operations["MaintenanceController_findGuideTasks"];
  };
  "/api/maintenance/guides/{id}": {
    get: operations["MaintenanceController_findGuideById"];
    delete: operations["MaintenanceController_deleteGuide"];
    patch: operations["MaintenanceController_updateGuide"];
  };
  "/api/maintenance/tasks": {
    get: operations["MaintenanceController_listTasks"];
    post: operations["MaintenanceController_createTask"];
  };
  "/api/maintenance/tasks/{id}": {
    get: operations["MaintenanceController_findByTaskId"];
    delete: operations["MaintenanceController_deleteTask"];
    patch: operations["MaintenanceController_updateTask"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    Condition: "BROKEN" | "POOR" | "GOOD" | "MINT";
    /** @enum {string} */
    VehicleType: "TRACTOR" | "SPRAYER" | "COMBINE" | "TRUCK" | "ATV" | "UTV" | "SEMITRUCK" | "OTHER";
    /** @enum {string} */
    PowerType: "GAS" | "DIESEL" | "HYBRID" | "ELECTRIC";
    CreateVehicleDto: {
      name?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      year?: number;
      condition?: components["schemas"]["Condition"];
      vehicleType: components["schemas"]["VehicleType"];
      make: string;
      model: string;
      machineHours?: number;
      link?: string;
      power: components["schemas"]["PowerType"];
    };
    /** @enum {string} */
    ImplementType: "SPRAYER" | "HARROW" | "DRILL" | "MOWER" | "CULTIVATOR" | "CHISEL" | "RODWEEDER" | "TRAILER" | "OTHER";
    /** @enum {string} */
    TaskStatus: "INCOMPLETE" | "COMPLETED" | "CANCELLED";
    Tool: {
      id: string;
      name: string;
      tasks?: (components["schemas"]["MaintenanceTask"])[];
    };
    Employee: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      tasks?: (components["schemas"]["MaintenanceTask"])[];
    };
    MaintenanceTask: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      status: components["schemas"]["TaskStatus"];
      /** Format: date-time */
      dueDate?: string;
      name: string;
      description?: string;
      machineHours?: number;
      tools?: (components["schemas"]["Tool"])[];
      assigneeId?: string;
      assignee?: components["schemas"]["Employee"];
      vehicle?: components["schemas"]["Vehicle"];
      vehicleId?: string;
      guide?: components["schemas"]["MaintenanceGuide"];
      guideId?: string;
    };
    MaintenanceGuide: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      content: string;
      tasks?: (components["schemas"]["MaintenanceTask"])[];
      vehicle?: components["schemas"]["Vehicle"];
      vehicleId?: string;
    };
    VehiclePart: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
      compatibleVehicles?: (components["schemas"]["Vehicle"])[];
    };
    Vehicle: {
      id: string;
      name?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      year?: number;
      condition?: components["schemas"]["Condition"];
      vehicleType: components["schemas"]["VehicleType"];
      make: string;
      model: string;
      machineHours?: number;
      link?: string;
      power: components["schemas"]["PowerType"];
      guides?: (components["schemas"]["MaintenanceGuide"])[];
      compatibleParts?: (components["schemas"]["VehiclePart"])[];
      compatibleAttachments?: (components["schemas"]["VehiclePart"])[];
      compatibleImplements?: (components["schemas"]["Implement"])[];
    };
    Attachment: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      name: string;
      condition?: components["schemas"]["Condition"];
      compatibleVehicles?: (components["schemas"]["Vehicle"])[];
    };
    Implement: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      name: string;
      make: string;
      model: string;
      year?: number;
      condition?: components["schemas"]["Condition"];
      implementType?: components["schemas"]["ImplementType"];
      compatibleVehicles?: (components["schemas"]["Vehicle"])[];
      compatibleAttachments?: (components["schemas"]["Attachment"])[];
    };
    VehicleResponse: {
      id: string;
      name?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      year?: number;
      condition?: components["schemas"]["Condition"];
      vehicleType: components["schemas"]["VehicleType"];
      make: string;
      model: string;
      machineHours?: number;
      link?: string;
      power: components["schemas"]["PowerType"];
      compatibleImplements?: (components["schemas"]["Implement"])[];
    };
    UpdateVehicleDto: {
      name?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** @default true */
      isOwned?: boolean;
      year?: number;
      condition?: components["schemas"]["Condition"];
      vehicleType?: components["schemas"]["VehicleType"];
      make?: string;
      model?: string;
      machineHours?: number;
      link?: string;
      power?: components["schemas"]["PowerType"];
    };
    CreateVehiclePartDto: {
      name: string;
    };
    UpdateVehiclePartDto: {
      name?: string;
    };
    ImplementResponse: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      name: string;
      make: string;
      model: string;
      year?: number;
      condition?: components["schemas"]["Condition"];
      implementType?: components["schemas"]["ImplementType"];
    };
    VehiclePartResponse: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
    };
    CreateImplementDto: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @default true */
      isOwned?: boolean;
      name: string;
      make: string;
      model: string;
      year?: number;
      condition?: components["schemas"]["Condition"];
      implementType?: components["schemas"]["ImplementType"];
    };
    UpdateImplementDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** @default true */
      isOwned?: boolean;
      name?: string;
      make?: string;
      model?: string;
      year?: number;
      condition?: components["schemas"]["Condition"];
      implementType?: components["schemas"]["ImplementType"];
    };
    CreateToolDto: {
      name: string;
    };
    ToolResponse: {
      id: string;
      name: string;
      tasks?: (components["schemas"]["MaintenanceTask"])[];
    };
    UpdateToolDto: {
      name?: string;
    };
    CreateEmployeeDto: {
      name: string;
    };
    EmployeeResponse: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      name: string;
    };
    UpdateEmployeeDto: {
      name?: string;
    };
    CreateMaintenanceGuideDto: {
      name: string;
      content: string;
      vehicleId?: string;
    };
    UpdateMaintenanceGuideDto: {
      vehicleId?: string;
    };
    CreateMaintenanceTaskDto: {
      status: components["schemas"]["TaskStatus"];
      /** Format: date-time */
      dueDate?: string;
      name: string;
      description?: string;
      machineHours?: number;
      assigneeId?: string;
      vehicleId?: string;
      guideId?: string;
    };
    UpdateMaintenanceTaskDto: {
      status?: components["schemas"]["TaskStatus"];
      /** Format: date-time */
      dueDate?: string;
      name?: string;
      description?: string;
      machineHours?: number;
      assigneeId?: string;
      vehicleId?: string;
      guideId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  VehiclesController_listVehicles: {
    parameters?: {
      query?: {
        name?: string;
        limit?: number;
        orderBy?: "id" | "name" | "createdAt" | "updatedAt" | "isOwned" | "year" | "condition" | "vehicleType" | "make" | "model" | "machineHours" | "link" | "power";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the vehicles */
      200: {
        content: {
          "application/json": (components["schemas"]["VehicleResponse"])[];
        };
      };
    };
  };
  VehiclesController_createVehicle: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVehicleDto"];
      };
    };
    responses: {
      /** @description Returns the created vehicle */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleResponse"];
        };
      };
    };
  };
  VehiclesController_findVehicleById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the vehicle */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleResponse"];
        };
      };
    };
  };
  VehiclesController_deleteVehicle: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted vehicle */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleResponse"];
        };
      };
    };
  };
  VehiclesController_updateVehicle: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVehicleDto"];
      };
    };
    responses: {
      /** @description Returns the updated vehicle */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleResponse"];
        };
      };
    };
  };
  VehiclesController_listParts: {
    parameters?: {
      query?: {
        name?: string;
        orderBy?: "id" | "createdAt" | "updatedAt" | "name";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the parts */
      200: {
        content: {
          "application/json": (components["schemas"]["VehiclePart"])[];
        };
      };
    };
  };
  VehiclesController_createPart: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVehiclePartDto"];
      };
    };
    responses: {
      /** @description Returns the created part */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclePart"];
        };
      };
    };
  };
  VehiclesController_findPartById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the part */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclePart"];
        };
      };
    };
  };
  VehiclesController_deletePart: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted part */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclePart"];
        };
      };
    };
  };
  VehiclesController_updatePart: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVehiclePartDto"];
      };
    };
    responses: {
      /** @description Returns the updated part */
      200: {
        content: {
          "application/json": components["schemas"]["VehiclePart"];
        };
      };
    };
  };
  VehiclesController_getCompatibleImplements: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the compatible implements for the vehicle */
      200: {
        content: {
          "application/json": (components["schemas"]["ImplementResponse"])[];
        };
      };
    };
  };
  VehiclesController_getCompatibleParts: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the compatible parts for the vehicle */
      200: {
        content: {
          "application/json": (components["schemas"]["VehiclePartResponse"])[];
        };
      };
    };
  };
  ImplementsController_listImplements: {
    parameters?: {
      query?: {
        name?: string;
        limit?: number;
        orderBy?: "id" | "createdAt" | "updatedAt" | "name" | "make" | "model" | "isOwned" | "year" | "condition" | "implementType";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the implements */
      200: {
        content: {
          "application/json": (components["schemas"]["ImplementResponse"])[];
        };
      };
    };
  };
  ImplementsController_createImplement: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateImplementDto"];
      };
    };
    responses: {
      /** @description Returns the created implement */
      200: {
        content: {
          "application/json": components["schemas"]["ImplementResponse"];
        };
      };
    };
  };
  ImplementsController_findImplementById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the implement */
      200: {
        content: {
          "application/json": components["schemas"]["ImplementResponse"];
        };
      };
    };
  };
  ImplementsController_deleteImplement: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted implement */
      200: {
        content: {
          "application/json": components["schemas"]["ImplementResponse"];
        };
      };
    };
  };
  ImplementsController_updateImplement: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateImplementDto"];
      };
    };
    responses: {
      /** @description Returns the updated implement */
      200: {
        content: {
          "application/json": components["schemas"]["ImplementResponse"];
        };
      };
    };
  };
  ToolsController_listTools: {
    parameters?: {
      query?: {
        name?: string;
        orderBy?: "id" | "createdAt" | "updatedAt" | "name";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the list of tools */
      200: {
        content: {
          "application/json": (components["schemas"]["ToolResponse"])[];
        };
      };
    };
  };
  ToolsController_createTool: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateToolDto"];
      };
    };
    responses: {
      /** @description Returns the created tool */
      200: {
        content: {
          "application/json": components["schemas"]["ToolResponse"];
        };
      };
    };
  };
  ToolsController_findToolById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the tool */
      200: {
        content: {
          "application/json": components["schemas"]["ToolResponse"];
        };
      };
    };
  };
  ToolsController_deleteTool: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted tool */
      200: {
        content: {
          "application/json": components["schemas"]["ToolResponse"];
        };
      };
    };
  };
  ToolsController_updateTool: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateToolDto"];
      };
    };
    responses: {
      /** @description Returns the updated tool */
      200: {
        content: {
          "application/json": components["schemas"]["ToolResponse"];
        };
      };
    };
  };
  EmployeesController_listEmployees: {
    parameters?: {
      query?: {
        name?: string;
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the employees */
      200: {
        content: {
          "application/json": (components["schemas"]["Employee"])[];
        };
      };
    };
  };
  EmployeesController_createEmployee: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEmployeeDto"];
      };
    };
    responses: {
      /** @description Returns the created employee */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeResponse"];
        };
      };
    };
  };
  EmployeesController_findEmployeeById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the employee */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeResponse"];
        };
      };
    };
  };
  EmployeesController_deleteEmployee: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted employee */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeResponse"];
        };
      };
    };
  };
  EmployeesController_updateEmployee: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEmployeeDto"];
      };
    };
    responses: {
      /** @description Returns the updated employee */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeResponse"];
        };
      };
    };
  };
  MaintenanceController_listGuides: {
    parameters?: {
      query?: {
        name?: string;
        orderBy?: "id" | "createdAt" | "updatedAt" | "name" | "content" | "manual" | "machineHours" | "vehicleId";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the maintenance guides */
      200: {
        content: {
          "application/json": (components["schemas"]["MaintenanceGuide"])[];
        };
      };
    };
  };
  MaintenanceController_createGuide: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMaintenanceGuideDto"];
      };
    };
    responses: {
      /** @description Returns the created maintenance guide */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceGuide"];
        };
      };
    };
  };
  MaintenanceController_findGuideByVehicle: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the maintenance guides for the vehicle */
      200: {
        content: {
          "application/json": (components["schemas"]["MaintenanceGuide"])[];
        };
      };
    };
  };
  MaintenanceController_findGuideTasks: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the maintenance tasks for the guide */
      200: {
        content: {
          "application/json": (components["schemas"]["MaintenanceTask"])[];
        };
      };
    };
  };
  MaintenanceController_findGuideById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the maintenance guide */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceGuide"];
        };
      };
    };
  };
  MaintenanceController_deleteGuide: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted maintenance guide */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceGuide"];
        };
      };
    };
  };
  MaintenanceController_updateGuide: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMaintenanceGuideDto"];
      };
    };
    responses: {
      /** @description Returns the updated maintenance guide */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceGuide"];
        };
      };
    };
  };
  MaintenanceController_listTasks: {
    parameters?: {
      query?: {
        name?: string;
        orderBy?: "id" | "createdAt" | "updatedAt" | "status" | "dueDate" | "name" | "description" | "assigneeId" | "guideId";
        sort?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Returns the maintenance tasks */
      200: {
        content: {
          "application/json": (components["schemas"]["MaintenanceTask"])[];
        };
      };
    };
  };
  MaintenanceController_createTask: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMaintenanceTaskDto"];
      };
    };
    responses: {
      /** @description Returns the created maintenance task */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceTask"];
        };
      };
    };
  };
  MaintenanceController_findByTaskId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the maintenance */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceTask"];
        };
      };
    };
  };
  MaintenanceController_deleteTask: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Returns the deleted maintenance */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceTask"];
        };
      };
    };
  };
  MaintenanceController_updateTask: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMaintenanceTaskDto"];
      };
    };
    responses: {
      /** @description Returns the updated maintenance */
      200: {
        content: {
          "application/json": components["schemas"]["MaintenanceTask"];
        };
      };
    };
  };
}
