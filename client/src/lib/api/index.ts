/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/vehicles': {
		get: operations['VehiclesController_listVehicles'];
		post: operations['VehiclesController_createVehicle'];
	};
	'/api/vehicles/{id}': {
		get: operations['VehiclesController_findVehicleById'];
		delete: operations['VehiclesController_deleteVehicle'];
		patch: operations['VehiclesController_updateVehicle'];
	};
	'/api/vehicles/parts': {
		get: operations['VehiclesController_listParts'];
		post: operations['VehiclesController_createPart'];
	};
	'/api/vehicles/parts/{id}': {
		get: operations['VehiclesController_findPartById'];
		delete: operations['VehiclesController_deletePart'];
		patch: operations['VehiclesController_updatePart'];
	};
	'/api/tools': {
		get: operations['ToolsController_listTools'];
		post: operations['ToolsController_createTool'];
	};
	'/api/tools/{id}': {
		get: operations['ToolsController_findToolById'];
		delete: operations['ToolsController_deleteTool'];
		patch: operations['ToolsController_updateTool'];
	};
	'/api/employees': {
		get: operations['EmployeesController_listEmployees'];
		post: operations['EmployeesController_createEmployee'];
	};
	'/api/employees/{id}': {
		get: operations['EmployeesController_findEmployeeById'];
		delete: operations['EmployeesController_deleteEmployee'];
		patch: operations['EmployeesController_updateEmployee'];
	};
	'/api/maintenance/guides': {
		get: operations['MaintenanceController_listGuides'];
		post: operations['MaintenanceController_createGuide'];
	};
	'/api/maintenance/guides/{id}': {
		get: operations['MaintenanceController_findGuideById'];
		delete: operations['MaintenanceController_deleteGuide'];
		patch: operations['MaintenanceController_updateGuide'];
	};
	'/api/maintenance/tasks': {
		get: operations['MaintenanceController_listTasks'];
		post: operations['MaintenanceController_createTask'];
	};
	'/api/maintenance/tasks/{id}': {
		get: operations['MaintenanceController_findByTaskId'];
		delete: operations['MaintenanceController_deleteTask'];
		patch: operations['MaintenanceController_updateTask'];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		/** @enum {string} */
		VehicleType: 'VEHICLE' | 'IMPLEMENT';
		/** @enum {string} */
		Power: 'GAS' | 'DIESEL' | 'ELECTRIC' | 'HYBRID';
		CreateVehicleDto: {
			name?: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			vin?: string;
			vehicleType: components['schemas']['VehicleType'];
			make: string;
			model: string;
			machineHours?: number;
			link?: string;
			power: components['schemas']['Power'];
		};
		VehicleResponse: {
			id: string;
			name?: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			vin?: string;
			vehicleType: components['schemas']['VehicleType'];
			make: string;
			model: string;
			machineHours?: number;
			link?: string;
			power: components['schemas']['Power'];
		};
		UpdateVehicleDto: {
			name?: string;
			/** Format: date-time */
			createdAt?: string;
			/** Format: date-time */
			updatedAt?: string;
			vin?: string;
			vehicleType?: components['schemas']['VehicleType'];
			make?: string;
			model?: string;
			machineHours?: number;
			link?: string;
			power?: components['schemas']['Power'];
		};
		/** @enum {string} */
		Condition: 'MINT' | 'GOOD' | 'POOR' | 'NEEDS_REPLACEMENT';
		CreateVehiclePartDto: {
			name: string;
			condition?: components['schemas']['Condition'];
			hours?: number;
			notes?: string;
			vehicleId?: string;
		};
		/** @enum {string} */
		TaskStatus: 'PENDING' | 'COMPLETE' | 'CANCELLED';
		Tool: {
			id: string;
			/** @description The name of the tool. */
			name?: string;
			maintenanceTask?: components['schemas']['MaintenanceTask'];
			maintenanceTaskId?: string;
		};
		Employee: {
			id: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			name: string;
			tasks: components['schemas']['MaintenanceTask'][];
		};
		MaintenanceGuide: {
			id: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			name: string;
			content: string;
			tasks: components['schemas']['MaintenanceTask'][];
			vehicle?: components['schemas']['Vehicle'];
			vehicleId?: string;
		};
		MaintenanceTask: {
			id: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			status: components['schemas']['TaskStatus'];
			/** Format: date-time */
			dueDate: string;
			/** Format: date-time */
			startedAt?: string;
			/** Format: date-time */
			completedAt?: string;
			name: string;
			machineHours?: number;
			notes?: string;
			tools?: components['schemas']['Tool'][];
			assigneeId?: string;
			assignee?: components['schemas']['Employee'];
			vehicle?: components['schemas']['Vehicle'];
			vehicleId?: string;
			guide?: components['schemas']['MaintenanceGuide'];
			guideId?: string;
		};
		VehiclePart: {
			id: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			name: string;
			condition?: components['schemas']['Condition'];
			hours?: number;
			notes?: string;
			vehicle?: components['schemas']['Vehicle'];
			vehicleId?: string;
		};
		Vehicle: {
			id: string;
			name?: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			vin?: string;
			vehicleType: components['schemas']['VehicleType'];
			make: string;
			model: string;
			machineHours?: number;
			link?: string;
			power: components['schemas']['Power'];
			tasks: components['schemas']['MaintenanceTask'][];
			guides: components['schemas']['MaintenanceGuide'][];
			parts: components['schemas']['VehiclePart'][];
		};
		UpdateVehiclePartDto: {
			name?: string;
			condition?: components['schemas']['Condition'];
			hours?: number;
			notes?: string;
			vehicleId?: string;
		};
		CreateToolDto: {
			/** @description The name of the tool. */
			name?: string;
			maintenanceTaskId?: string;
		};
		ToolResponse: {
			id: string;
			/** @description The name of the tool. */
			name?: string;
			maintenanceTask?: components['schemas']['MaintenanceTask'];
			maintenanceTaskId?: string;
		};
		UpdateToolDto: {
			/** @description The name of the tool. */
			name?: string;
			maintenanceTaskId?: string;
		};
		CreateEmployeeDto: {
			name: string;
		};
		EmployeeResponse: {
			id: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
			name: string;
		};
		UpdateEmployeeDto: {
			name?: string;
		};
		CreateMaintenanceGuideDto: {
			name: string;
			content: string;
			vehicleId?: string;
		};
		UpdateMaintenanceGuideDto: {
			vehicleId?: string;
		};
		CreateMaintenanceTaskDto: {
			status: components['schemas']['TaskStatus'];
			/** Format: date-time */
			dueDate: string;
			/** Format: date-time */
			startedAt?: string;
			/** Format: date-time */
			completedAt?: string;
			name: string;
			machineHours?: number;
			notes?: string;
			assigneeId?: string;
			vehicleId?: string;
			guideId?: string;
		};
		UpdateMaintenanceTaskDto: {
			status?: components['schemas']['TaskStatus'];
			/** Format: date-time */
			dueDate?: string;
			/** Format: date-time */
			startedAt?: string;
			/** Format: date-time */
			completedAt?: string;
			name?: string;
			machineHours?: number;
			notes?: string;
			assigneeId?: string;
			vehicleId?: string;
			guideId?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
	VehiclesController_listVehicles: {
		parameters?: {
			query?: {
				name?: string;
				orderBy?:
					| 'id'
					| 'name'
					| 'createdAt'
					| 'updatedAt'
					| 'vin'
					| 'vehicleType'
					| 'make'
					| 'model'
					| 'machineHours'
					| 'link'
					| 'power';
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the vehicles */
			200: {
				content: {
					'application/json': components['schemas']['VehicleResponse'][];
				};
			};
		};
	};
	VehiclesController_createVehicle: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateVehicleDto'];
			};
		};
		responses: {
			/** @description Returns the created vehicle */
			200: {
				content: {
					'application/json': components['schemas']['VehicleResponse'];
				};
			};
		};
	};
	VehiclesController_findVehicleById: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the vehicle */
			200: {
				content: {
					'application/json': components['schemas']['VehicleResponse'];
				};
			};
		};
	};
	VehiclesController_deleteVehicle: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted vehicle */
			200: {
				content: {
					'application/json': components['schemas']['VehicleResponse'];
				};
			};
		};
	};
	VehiclesController_updateVehicle: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateVehicleDto'];
			};
		};
		responses: {
			/** @description Returns the updated vehicle */
			200: {
				content: {
					'application/json': components['schemas']['VehicleResponse'];
				};
			};
		};
	};
	VehiclesController_listParts: {
		parameters?: {
			query?: {
				name?: string;
				orderBy?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'condition' | 'hours' | 'notes' | 'vehicleId';
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the parts */
			200: {
				content: {
					'application/json': components['schemas']['VehiclePart'][];
				};
			};
		};
	};
	VehiclesController_createPart: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateVehiclePartDto'];
			};
		};
		responses: {
			/** @description Returns the created part */
			200: {
				content: {
					'application/json': components['schemas']['VehiclePart'];
				};
			};
		};
	};
	VehiclesController_findPartById: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the part */
			200: {
				content: {
					'application/json': components['schemas']['VehiclePart'];
				};
			};
		};
	};
	VehiclesController_deletePart: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted part */
			200: {
				content: {
					'application/json': components['schemas']['VehiclePart'];
				};
			};
		};
	};
	VehiclesController_updatePart: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateVehiclePartDto'];
			};
		};
		responses: {
			/** @description Returns the updated part */
			200: {
				content: {
					'application/json': components['schemas']['VehiclePart'];
				};
			};
		};
	};
	ToolsController_listTools: {
		parameters?: {
			query?: {
				name?: string;
				orderBy?: 'id' | 'name' | 'maintenanceTaskId';
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the list of tools */
			200: {
				content: {
					'application/json': components['schemas']['ToolResponse'][];
				};
			};
		};
	};
	ToolsController_createTool: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateToolDto'];
			};
		};
		responses: {
			/** @description Returns the created tool */
			200: {
				content: {
					'application/json': components['schemas']['ToolResponse'];
				};
			};
		};
	};
	ToolsController_findToolById: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the tool */
			200: {
				content: {
					'application/json': components['schemas']['ToolResponse'];
				};
			};
		};
	};
	ToolsController_deleteTool: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted tool */
			200: {
				content: {
					'application/json': components['schemas']['ToolResponse'];
				};
			};
		};
	};
	ToolsController_updateTool: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateToolDto'];
			};
		};
		responses: {
			/** @description Returns the updated tool */
			200: {
				content: {
					'application/json': components['schemas']['ToolResponse'];
				};
			};
		};
	};
	EmployeesController_listEmployees: {
		parameters?: {
			query?: {
				name?: string;
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the employees */
			200: {
				content: {
					'application/json': components['schemas']['Employee'][];
				};
			};
		};
	};
	EmployeesController_createEmployee: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateEmployeeDto'];
			};
		};
		responses: {
			/** @description Returns the created employee */
			200: {
				content: {
					'application/json': components['schemas']['EmployeeResponse'];
				};
			};
		};
	};
	EmployeesController_findEmployeeById: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the employee */
			200: {
				content: {
					'application/json': components['schemas']['EmployeeResponse'];
				};
			};
		};
	};
	EmployeesController_deleteEmployee: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted employee */
			200: {
				content: {
					'application/json': components['schemas']['EmployeeResponse'];
				};
			};
		};
	};
	EmployeesController_updateEmployee: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateEmployeeDto'];
			};
		};
		responses: {
			/** @description Returns the updated employee */
			200: {
				content: {
					'application/json': components['schemas']['EmployeeResponse'];
				};
			};
		};
	};
	MaintenanceController_listGuides: {
		parameters?: {
			query?: {
				name?: string;
				orderBy?: 'id' | 'createdAt' | 'updatedAt' | 'name' | 'content' | 'vehicleId';
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the maintenance guides */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceGuide'][];
				};
			};
		};
	};
	MaintenanceController_createGuide: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateMaintenanceGuideDto'];
			};
		};
		responses: {
			/** @description Returns the created maintenance guide */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceGuide'];
				};
			};
		};
	};
	MaintenanceController_findGuideById: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the maintenance guide */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceGuide'];
				};
			};
		};
	};
	MaintenanceController_deleteGuide: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted maintenance guide */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceGuide'];
				};
			};
		};
	};
	MaintenanceController_updateGuide: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateMaintenanceGuideDto'];
			};
		};
		responses: {
			/** @description Returns the updated maintenance guide */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceGuide'];
				};
			};
		};
	};
	MaintenanceController_listTasks: {
		parameters?: {
			query?: {
				name?: string;
				orderBy?:
					| 'id'
					| 'createdAt'
					| 'updatedAt'
					| 'status'
					| 'dueDate'
					| 'startedAt'
					| 'completedAt'
					| 'name'
					| 'machineHours'
					| 'notes'
					| 'assigneeId'
					| 'vehicleId'
					| 'guideId';
				sort?: 'asc' | 'desc';
			};
		};
		responses: {
			/** @description Returns the maintenance tasks */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceTask'][];
				};
			};
		};
	};
	MaintenanceController_createTask: {
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateMaintenanceTaskDto'];
			};
		};
		responses: {
			/** @description Returns the created maintenance task */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceTask'];
				};
			};
		};
	};
	MaintenanceController_findByTaskId: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the maintenance */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceTask'];
				};
			};
		};
	};
	MaintenanceController_deleteTask: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Returns the deleted maintenance */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceTask'];
				};
			};
		};
	};
	MaintenanceController_updateTask: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateMaintenanceTaskDto'];
			};
		};
		responses: {
			/** @description Returns the updated maintenance */
			200: {
				content: {
					'application/json': components['schemas']['MaintenanceTask'];
				};
			};
		};
	};
}
