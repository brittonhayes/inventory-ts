/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateImplementDto,
  ImplementResponse,
  UpdateImplementDto,
} from '../models';
import {
    CreateImplementDtoFromJSON,
    CreateImplementDtoToJSON,
    ImplementResponseFromJSON,
    ImplementResponseToJSON,
    UpdateImplementDtoFromJSON,
    UpdateImplementDtoToJSON,
} from '../models';

export interface ImplementsControllerCreateRequest {
    createImplementDto: CreateImplementDto;
}

export interface ImplementsControllerDeleteRequest {
    id: string;
}

export interface ImplementsControllerFindByIdRequest {
    id: string;
}

export interface ImplementsControllerListRequest {
    name?: string;
    orderBy?: ImplementsControllerListOrderByEnum;
    sort?: ImplementsControllerListSortEnum;
}

export interface ImplementsControllerUpdateRequest {
    id: string;
    updateImplementDto: UpdateImplementDto;
}

/**
 * 
 */
export class ImplementsApi extends runtime.BaseAPI {

    /**
     */
    async implementsControllerCreateRaw(requestParameters: ImplementsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImplementResponse>> {
        if (requestParameters.createImplementDto === null || requestParameters.createImplementDto === undefined) {
            throw new runtime.RequiredError('createImplementDto','Required parameter requestParameters.createImplementDto was null or undefined when calling implementsControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/implements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImplementDtoToJSON(requestParameters.createImplementDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementResponseFromJSON(jsonValue));
    }

    /**
     */
    async implementsControllerCreate(requestParameters: ImplementsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImplementResponse> {
        const response = await this.implementsControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async implementsControllerDeleteRaw(requestParameters: ImplementsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImplementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling implementsControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/implements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementResponseFromJSON(jsonValue));
    }

    /**
     */
    async implementsControllerDelete(requestParameters: ImplementsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImplementResponse> {
        const response = await this.implementsControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async implementsControllerFindByIdRaw(requestParameters: ImplementsControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImplementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling implementsControllerFindById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/implements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementResponseFromJSON(jsonValue));
    }

    /**
     */
    async implementsControllerFindById(requestParameters: ImplementsControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImplementResponse> {
        const response = await this.implementsControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async implementsControllerListRaw(requestParameters: ImplementsControllerListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImplementResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/implements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImplementResponseFromJSON));
    }

    /**
     */
    async implementsControllerList(requestParameters: ImplementsControllerListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImplementResponse>> {
        const response = await this.implementsControllerListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async implementsControllerUpdateRaw(requestParameters: ImplementsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImplementResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling implementsControllerUpdate.');
        }

        if (requestParameters.updateImplementDto === null || requestParameters.updateImplementDto === undefined) {
            throw new runtime.RequiredError('updateImplementDto','Required parameter requestParameters.updateImplementDto was null or undefined when calling implementsControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/implements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateImplementDtoToJSON(requestParameters.updateImplementDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImplementResponseFromJSON(jsonValue));
    }

    /**
     */
    async implementsControllerUpdate(requestParameters: ImplementsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImplementResponse> {
        const response = await this.implementsControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ImplementsControllerListOrderByEnum = {
    Id: 'id',
    Name: 'name',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Condition: 'condition',
    TagName: 'tagName',
    LocationId: 'locationId'
} as const;
export type ImplementsControllerListOrderByEnum = typeof ImplementsControllerListOrderByEnum[keyof typeof ImplementsControllerListOrderByEnum];
/**
 * @export
 */
export const ImplementsControllerListSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ImplementsControllerListSortEnum = typeof ImplementsControllerListSortEnum[keyof typeof ImplementsControllerListSortEnum];
