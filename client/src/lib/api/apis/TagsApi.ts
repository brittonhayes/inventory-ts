/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateTagDto, TagResponse, UpdateTagDto } from '../models';
import {
	CreateTagDtoFromJSON,
	CreateTagDtoToJSON,
	TagResponseFromJSON,
	TagResponseToJSON,
	UpdateTagDtoFromJSON,
	UpdateTagDtoToJSON
} from '../models';

export interface TagsControllerCreateRequest {
	createTagDto: CreateTagDto;
}

export interface TagsControllerDeleteRequest {
	name: string;
}

export interface TagsControllerFindByIdRequest {
	name: string;
}

export interface TagsControllerListRequest {
	name?: string;
	sort?: TagsControllerListSortEnum;
}

export interface TagsControllerUpdateRequest {
	name: string;
	updateTagDto: UpdateTagDto;
}

/**
 *
 */
export class TagsApi extends runtime.BaseAPI {
	/**
	 */
	async tagsControllerCreateRaw(
		requestParameters: TagsControllerCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TagResponse>> {
		if (requestParameters.createTagDto === null || requestParameters.createTagDto === undefined) {
			throw new runtime.RequiredError(
				'createTagDto',
				'Required parameter requestParameters.createTagDto was null or undefined when calling tagsControllerCreate.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/api/tags`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: CreateTagDtoToJSON(requestParameters.createTagDto)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
	}

	/**
	 */
	async tagsControllerCreate(
		requestParameters: TagsControllerCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TagResponse> {
		const response = await this.tagsControllerCreateRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async tagsControllerDeleteRaw(
		requestParameters: TagsControllerDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TagResponse>> {
		if (requestParameters.name === null || requestParameters.name === undefined) {
			throw new runtime.RequiredError(
				'name',
				'Required parameter requestParameters.name was null or undefined when calling tagsControllerDelete.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/tags/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
	}

	/**
	 */
	async tagsControllerDelete(
		requestParameters: TagsControllerDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TagResponse> {
		const response = await this.tagsControllerDeleteRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async tagsControllerFindByIdRaw(
		requestParameters: TagsControllerFindByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TagResponse>> {
		if (requestParameters.name === null || requestParameters.name === undefined) {
			throw new runtime.RequiredError(
				'name',
				'Required parameter requestParameters.name was null or undefined when calling tagsControllerFindById.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/tags/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
	}

	/**
	 */
	async tagsControllerFindById(
		requestParameters: TagsControllerFindByIdRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TagResponse> {
		const response = await this.tagsControllerFindByIdRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async tagsControllerListRaw(
		requestParameters: TagsControllerListRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<TagResponse>>> {
		const queryParameters: any = {};

		if (requestParameters.name !== undefined) {
			queryParameters['name'] = requestParameters.name;
		}

		if (requestParameters.sort !== undefined) {
			queryParameters['sort'] = requestParameters.sort;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/tags`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagResponseFromJSON));
	}

	/**
	 */
	async tagsControllerList(
		requestParameters: TagsControllerListRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<TagResponse>> {
		const response = await this.tagsControllerListRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async tagsControllerUpdateRaw(
		requestParameters: TagsControllerUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<TagResponse>> {
		if (requestParameters.name === null || requestParameters.name === undefined) {
			throw new runtime.RequiredError(
				'name',
				'Required parameter requestParameters.name was null or undefined when calling tagsControllerUpdate.'
			);
		}

		if (requestParameters.updateTagDto === null || requestParameters.updateTagDto === undefined) {
			throw new runtime.RequiredError(
				'updateTagDto',
				'Required parameter requestParameters.updateTagDto was null or undefined when calling tagsControllerUpdate.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/api/tags/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name))),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: UpdateTagDtoToJSON(requestParameters.updateTagDto)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => TagResponseFromJSON(jsonValue));
	}

	/**
	 */
	async tagsControllerUpdate(
		requestParameters: TagsControllerUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<TagResponse> {
		const response = await this.tagsControllerUpdateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}

/**
 * @export
 */
export const TagsControllerListSortEnum = {
	Asc: 'asc',
	Desc: 'desc'
} as const;
export type TagsControllerListSortEnum = typeof TagsControllerListSortEnum[keyof typeof TagsControllerListSortEnum];
