/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateToolDto,
  ToolResponse,
  UpdateToolDto,
} from '../models';
import {
    CreateToolDtoFromJSON,
    CreateToolDtoToJSON,
    ToolResponseFromJSON,
    ToolResponseToJSON,
    UpdateToolDtoFromJSON,
    UpdateToolDtoToJSON,
} from '../models';

export interface ToolsControllerCreateRequest {
    createToolDto: CreateToolDto;
}

export interface ToolsControllerDeleteRequest {
    id: string;
}

export interface ToolsControllerFindByIdRequest {
    id: string;
}

export interface ToolsControllerListRequest {
    name?: string;
    orderBy?: ToolsControllerListOrderByEnum;
    sort?: ToolsControllerListSortEnum;
}

export interface ToolsControllerUpdateRequest {
    id: string;
    updateToolDto: UpdateToolDto;
}

/**
 * 
 */
export class ToolsApi extends runtime.BaseAPI {

    /**
     */
    async toolsControllerCreateRaw(requestParameters: ToolsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolResponse>> {
        if (requestParameters.createToolDto === null || requestParameters.createToolDto === undefined) {
            throw new runtime.RequiredError('createToolDto','Required parameter requestParameters.createToolDto was null or undefined when calling toolsControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateToolDtoToJSON(requestParameters.createToolDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolResponseFromJSON(jsonValue));
    }

    /**
     */
    async toolsControllerCreate(requestParameters: ToolsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolResponse> {
        const response = await this.toolsControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async toolsControllerDeleteRaw(requestParameters: ToolsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling toolsControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolResponseFromJSON(jsonValue));
    }

    /**
     */
    async toolsControllerDelete(requestParameters: ToolsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolResponse> {
        const response = await this.toolsControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async toolsControllerFindByIdRaw(requestParameters: ToolsControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling toolsControllerFindById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolResponseFromJSON(jsonValue));
    }

    /**
     */
    async toolsControllerFindById(requestParameters: ToolsControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolResponse> {
        const response = await this.toolsControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async toolsControllerListRaw(requestParameters: ToolsControllerListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async toolsControllerList(requestParameters: ToolsControllerListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.toolsControllerListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async toolsControllerUpdateRaw(requestParameters: ToolsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling toolsControllerUpdate.');
        }

        if (requestParameters.updateToolDto === null || requestParameters.updateToolDto === undefined) {
            throw new runtime.RequiredError('updateToolDto','Required parameter requestParameters.updateToolDto was null or undefined when calling toolsControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateToolDtoToJSON(requestParameters.updateToolDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolResponseFromJSON(jsonValue));
    }

    /**
     */
    async toolsControllerUpdate(requestParameters: ToolsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolResponse> {
        const response = await this.toolsControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ToolsControllerListOrderByEnum = {
    Id: 'id',
    Name: 'name',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Condition: 'condition',
    TagName: 'tagName',
    LocationId: 'locationId'
} as const;
export type ToolsControllerListOrderByEnum = typeof ToolsControllerListOrderByEnum[keyof typeof ToolsControllerListOrderByEnum];
/**
 * @export
 */
export const ToolsControllerListSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ToolsControllerListSortEnum = typeof ToolsControllerListSortEnum[keyof typeof ToolsControllerListSortEnum];
