/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateVehicleDto,
  VehicleResponse,
} from '../models';
import {
    CreateVehicleDtoFromJSON,
    CreateVehicleDtoToJSON,
    VehicleResponseFromJSON,
    VehicleResponseToJSON,
} from '../models';

export interface VehiclesControllerCreateRequest {
    createVehicleDto: CreateVehicleDto;
}

export interface VehiclesControllerDeleteRequest {
    id: string;
}

export interface VehiclesControllerFindByIdRequest {
    id: string;
}

export interface VehiclesControllerListRequest {
    name?: string;
    orderBy?: VehiclesControllerListOrderByEnum;
    sort?: VehiclesControllerListSortEnum;
}

export interface VehiclesControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class VehiclesApi extends runtime.BaseAPI {

    /**
     */
    async vehiclesControllerCreateRaw(requestParameters: VehiclesControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.createVehicleDto === null || requestParameters.createVehicleDto === undefined) {
            throw new runtime.RequiredError('createVehicleDto','Required parameter requestParameters.createVehicleDto was null or undefined when calling vehiclesControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleDtoToJSON(requestParameters.createVehicleDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerCreate(requestParameters: VehiclesControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerDeleteRaw(requestParameters: VehiclesControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerDelete(requestParameters: VehiclesControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerFindByIdRaw(requestParameters: VehiclesControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerFindById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerFindById(requestParameters: VehiclesControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerListRaw(requestParameters: VehiclesControllerListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VehicleResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleResponseFromJSON));
    }

    /**
     */
    async vehiclesControllerList(requestParameters: VehiclesControllerListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VehicleResponse>> {
        const response = await this.vehiclesControllerListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerUpdateRaw(requestParameters: VehiclesControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling vehiclesControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerUpdate(requestParameters: VehiclesControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VehiclesControllerListOrderByEnum = {
    Id: 'id',
    Name: 'name',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Make: 'make',
    Model: 'model',
    Hours: 'hours',
    Year: 'year',
    Active: 'active',
    Power: 'power',
    TagName: 'tagName',
    LocationId: 'locationId'
} as const;
export type VehiclesControllerListOrderByEnum = typeof VehiclesControllerListOrderByEnum[keyof typeof VehiclesControllerListOrderByEnum];
/**
 * @export
 */
export const VehiclesControllerListSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type VehiclesControllerListSortEnum = typeof VehiclesControllerListSortEnum[keyof typeof VehiclesControllerListSortEnum];
