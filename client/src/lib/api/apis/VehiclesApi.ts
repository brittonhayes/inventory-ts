/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateVehicleDto,
  CreateVehiclePartDto,
  UpdateVehicleDto,
  UpdateVehiclePartDto,
  VehiclePart,
  VehicleResponse,
} from '../models';
import {
    CreateVehicleDtoFromJSON,
    CreateVehicleDtoToJSON,
    CreateVehiclePartDtoFromJSON,
    CreateVehiclePartDtoToJSON,
    UpdateVehicleDtoFromJSON,
    UpdateVehicleDtoToJSON,
    UpdateVehiclePartDtoFromJSON,
    UpdateVehiclePartDtoToJSON,
    VehiclePartFromJSON,
    VehiclePartToJSON,
    VehicleResponseFromJSON,
    VehicleResponseToJSON,
} from '../models';

export interface VehiclesControllerCreatePartRequest {
    createVehiclePartDto: CreateVehiclePartDto;
}

export interface VehiclesControllerCreateVehicleRequest {
    createVehicleDto: CreateVehicleDto;
}

export interface VehiclesControllerDeletePartRequest {
    id: string;
}

export interface VehiclesControllerDeleteVehicleRequest {
    id: string;
}

export interface VehiclesControllerFindPartByIdRequest {
    id: string;
}

export interface VehiclesControllerFindVehicleByIdRequest {
    id: string;
}

export interface VehiclesControllerListPartsRequest {
    name?: string;
    orderBy?: VehiclesControllerListPartsOrderByEnum;
    sort?: VehiclesControllerListPartsSortEnum;
}

export interface VehiclesControllerListVehiclesRequest {
    name?: string;
    orderBy?: VehiclesControllerListVehiclesOrderByEnum;
    sort?: VehiclesControllerListVehiclesSortEnum;
}

export interface VehiclesControllerUpdatePartRequest {
    id: string;
    updateVehiclePartDto: UpdateVehiclePartDto;
}

export interface VehiclesControllerUpdateVehicleRequest {
    id: string;
    updateVehicleDto: UpdateVehicleDto;
}

/**
 * 
 */
export class VehiclesApi extends runtime.BaseAPI {

    /**
     */
    async vehiclesControllerCreatePartRaw(requestParameters: VehiclesControllerCreatePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePart>> {
        if (requestParameters.createVehiclePartDto === null || requestParameters.createVehiclePartDto === undefined) {
            throw new runtime.RequiredError('createVehiclePartDto','Required parameter requestParameters.createVehiclePartDto was null or undefined when calling vehiclesControllerCreatePart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles/parts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehiclePartDtoToJSON(requestParameters.createVehiclePartDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePartFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerCreatePart(requestParameters: VehiclesControllerCreatePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePart> {
        const response = await this.vehiclesControllerCreatePartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerCreateVehicleRaw(requestParameters: VehiclesControllerCreateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.createVehicleDto === null || requestParameters.createVehicleDto === undefined) {
            throw new runtime.RequiredError('createVehicleDto','Required parameter requestParameters.createVehicleDto was null or undefined when calling vehiclesControllerCreateVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVehicleDtoToJSON(requestParameters.createVehicleDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerCreateVehicle(requestParameters: VehiclesControllerCreateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerCreateVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerDeletePartRaw(requestParameters: VehiclesControllerDeletePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePart>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerDeletePart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/parts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePartFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerDeletePart(requestParameters: VehiclesControllerDeletePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePart> {
        const response = await this.vehiclesControllerDeletePartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerDeleteVehicleRaw(requestParameters: VehiclesControllerDeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerDeleteVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerDeleteVehicle(requestParameters: VehiclesControllerDeleteVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerDeleteVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerFindPartByIdRaw(requestParameters: VehiclesControllerFindPartByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePart>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerFindPartById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/parts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePartFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerFindPartById(requestParameters: VehiclesControllerFindPartByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePart> {
        const response = await this.vehiclesControllerFindPartByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerFindVehicleByIdRaw(requestParameters: VehiclesControllerFindVehicleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerFindVehicleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerFindVehicleById(requestParameters: VehiclesControllerFindVehicleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerFindVehicleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerListPartsRaw(requestParameters: VehiclesControllerListPartsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VehiclePart>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles/parts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehiclePartFromJSON));
    }

    /**
     */
    async vehiclesControllerListParts(requestParameters: VehiclesControllerListPartsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VehiclePart>> {
        const response = await this.vehiclesControllerListPartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerListVehiclesRaw(requestParameters: VehiclesControllerListVehiclesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VehicleResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/vehicles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleResponseFromJSON));
    }

    /**
     */
    async vehiclesControllerListVehicles(requestParameters: VehiclesControllerListVehiclesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VehicleResponse>> {
        const response = await this.vehiclesControllerListVehiclesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerUpdatePartRaw(requestParameters: VehiclesControllerUpdatePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehiclePart>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerUpdatePart.');
        }

        if (requestParameters.updateVehiclePartDto === null || requestParameters.updateVehiclePartDto === undefined) {
            throw new runtime.RequiredError('updateVehiclePartDto','Required parameter requestParameters.updateVehiclePartDto was null or undefined when calling vehiclesControllerUpdatePart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles/parts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVehiclePartDtoToJSON(requestParameters.updateVehiclePartDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehiclePartFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerUpdatePart(requestParameters: VehiclesControllerUpdatePartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehiclePart> {
        const response = await this.vehiclesControllerUpdatePartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async vehiclesControllerUpdateVehicleRaw(requestParameters: VehiclesControllerUpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VehicleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling vehiclesControllerUpdateVehicle.');
        }

        if (requestParameters.updateVehicleDto === null || requestParameters.updateVehicleDto === undefined) {
            throw new runtime.RequiredError('updateVehicleDto','Required parameter requestParameters.updateVehicleDto was null or undefined when calling vehiclesControllerUpdateVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/vehicles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVehicleDtoToJSON(requestParameters.updateVehicleDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleResponseFromJSON(jsonValue));
    }

    /**
     */
    async vehiclesControllerUpdateVehicle(requestParameters: VehiclesControllerUpdateVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VehicleResponse> {
        const response = await this.vehiclesControllerUpdateVehicleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VehiclesControllerListPartsOrderByEnum = {
    Id: 'id',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Condition: 'condition',
    Hours: 'hours',
    Notes: 'notes',
    VehicleId: 'vehicleId'
} as const;
export type VehiclesControllerListPartsOrderByEnum = typeof VehiclesControllerListPartsOrderByEnum[keyof typeof VehiclesControllerListPartsOrderByEnum];
/**
 * @export
 */
export const VehiclesControllerListPartsSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type VehiclesControllerListPartsSortEnum = typeof VehiclesControllerListPartsSortEnum[keyof typeof VehiclesControllerListPartsSortEnum];
/**
 * @export
 */
export const VehiclesControllerListVehiclesOrderByEnum = {
    Id: 'id',
    Name: 'name',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Vin: 'vin',
    VehicleType: 'vehicleType',
    Make: 'make',
    Model: 'model',
    MachineHours: 'machineHours',
    Link: 'link',
    Power: 'power'
} as const;
export type VehiclesControllerListVehiclesOrderByEnum = typeof VehiclesControllerListVehiclesOrderByEnum[keyof typeof VehiclesControllerListVehiclesOrderByEnum];
/**
 * @export
 */
export const VehiclesControllerListVehiclesSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type VehiclesControllerListVehiclesSortEnum = typeof VehiclesControllerListVehiclesSortEnum[keyof typeof VehiclesControllerListVehiclesSortEnum];
