/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMaintenanceGuideDto,
  CreateMaintenanceTaskDto,
  MaintenanceGuide,
  MaintenanceTask,
  UpdateMaintenanceGuideDto,
  UpdateMaintenanceTaskDto,
} from '../models';
import {
    CreateMaintenanceGuideDtoFromJSON,
    CreateMaintenanceGuideDtoToJSON,
    CreateMaintenanceTaskDtoFromJSON,
    CreateMaintenanceTaskDtoToJSON,
    MaintenanceGuideFromJSON,
    MaintenanceGuideToJSON,
    MaintenanceTaskFromJSON,
    MaintenanceTaskToJSON,
    UpdateMaintenanceGuideDtoFromJSON,
    UpdateMaintenanceGuideDtoToJSON,
    UpdateMaintenanceTaskDtoFromJSON,
    UpdateMaintenanceTaskDtoToJSON,
} from '../models';

export interface MaintenanceControllerCreateGuideRequest {
    createMaintenanceGuideDto: CreateMaintenanceGuideDto;
}

export interface MaintenanceControllerCreateTaskRequest {
    createMaintenanceTaskDto: CreateMaintenanceTaskDto;
}

export interface MaintenanceControllerDeleteGuideRequest {
    id: string;
}

export interface MaintenanceControllerDeleteTaskRequest {
    id: string;
}

export interface MaintenanceControllerFindByTaskIdRequest {
    id: string;
}

export interface MaintenanceControllerFindGuideByIdRequest {
    id: string;
}

export interface MaintenanceControllerListGuidesRequest {
    name?: string;
    orderBy?: MaintenanceControllerListGuidesOrderByEnum;
    sort?: MaintenanceControllerListGuidesSortEnum;
}

export interface MaintenanceControllerListTasksRequest {
    name?: string;
    orderBy?: MaintenanceControllerListTasksOrderByEnum;
    sort?: MaintenanceControllerListTasksSortEnum;
}

export interface MaintenanceControllerUpdateGuideRequest {
    id: string;
    updateMaintenanceGuideDto: UpdateMaintenanceGuideDto;
}

export interface MaintenanceControllerUpdateTaskRequest {
    id: string;
    updateMaintenanceTaskDto: UpdateMaintenanceTaskDto;
}

/**
 * 
 */
export class MaintenanceApi extends runtime.BaseAPI {

    /**
     */
    async maintenanceControllerCreateGuideRaw(requestParameters: MaintenanceControllerCreateGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceGuide>> {
        if (requestParameters.createMaintenanceGuideDto === null || requestParameters.createMaintenanceGuideDto === undefined) {
            throw new runtime.RequiredError('createMaintenanceGuideDto','Required parameter requestParameters.createMaintenanceGuideDto was null or undefined when calling maintenanceControllerCreateGuide.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/maintenance/guides`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMaintenanceGuideDtoToJSON(requestParameters.createMaintenanceGuideDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceGuideFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerCreateGuide(requestParameters: MaintenanceControllerCreateGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceGuide> {
        const response = await this.maintenanceControllerCreateGuideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerCreateTaskRaw(requestParameters: MaintenanceControllerCreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceTask>> {
        if (requestParameters.createMaintenanceTaskDto === null || requestParameters.createMaintenanceTaskDto === undefined) {
            throw new runtime.RequiredError('createMaintenanceTaskDto','Required parameter requestParameters.createMaintenanceTaskDto was null or undefined when calling maintenanceControllerCreateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/maintenance/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMaintenanceTaskDtoToJSON(requestParameters.createMaintenanceTaskDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceTaskFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerCreateTask(requestParameters: MaintenanceControllerCreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceTask> {
        const response = await this.maintenanceControllerCreateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerDeleteGuideRaw(requestParameters: MaintenanceControllerDeleteGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceGuide>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerDeleteGuide.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/guides/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceGuideFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerDeleteGuide(requestParameters: MaintenanceControllerDeleteGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceGuide> {
        const response = await this.maintenanceControllerDeleteGuideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerDeleteTaskRaw(requestParameters: MaintenanceControllerDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerDeleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceTaskFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerDeleteTask(requestParameters: MaintenanceControllerDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceTask> {
        const response = await this.maintenanceControllerDeleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerFindByTaskIdRaw(requestParameters: MaintenanceControllerFindByTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerFindByTaskId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceTaskFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerFindByTaskId(requestParameters: MaintenanceControllerFindByTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceTask> {
        const response = await this.maintenanceControllerFindByTaskIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerFindGuideByIdRaw(requestParameters: MaintenanceControllerFindGuideByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceGuide>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerFindGuideById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/guides/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceGuideFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerFindGuideById(requestParameters: MaintenanceControllerFindGuideByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceGuide> {
        const response = await this.maintenanceControllerFindGuideByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerListGuidesRaw(requestParameters: MaintenanceControllerListGuidesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MaintenanceGuide>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/guides`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaintenanceGuideFromJSON));
    }

    /**
     */
    async maintenanceControllerListGuides(requestParameters: MaintenanceControllerListGuidesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MaintenanceGuide>> {
        const response = await this.maintenanceControllerListGuidesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerListTasksRaw(requestParameters: MaintenanceControllerListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MaintenanceTask>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/maintenance/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaintenanceTaskFromJSON));
    }

    /**
     */
    async maintenanceControllerListTasks(requestParameters: MaintenanceControllerListTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MaintenanceTask>> {
        const response = await this.maintenanceControllerListTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerUpdateGuideRaw(requestParameters: MaintenanceControllerUpdateGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceGuide>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerUpdateGuide.');
        }

        if (requestParameters.updateMaintenanceGuideDto === null || requestParameters.updateMaintenanceGuideDto === undefined) {
            throw new runtime.RequiredError('updateMaintenanceGuideDto','Required parameter requestParameters.updateMaintenanceGuideDto was null or undefined when calling maintenanceControllerUpdateGuide.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/maintenance/guides/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMaintenanceGuideDtoToJSON(requestParameters.updateMaintenanceGuideDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceGuideFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerUpdateGuide(requestParameters: MaintenanceControllerUpdateGuideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceGuide> {
        const response = await this.maintenanceControllerUpdateGuideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async maintenanceControllerUpdateTaskRaw(requestParameters: MaintenanceControllerUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaintenanceTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling maintenanceControllerUpdateTask.');
        }

        if (requestParameters.updateMaintenanceTaskDto === null || requestParameters.updateMaintenanceTaskDto === undefined) {
            throw new runtime.RequiredError('updateMaintenanceTaskDto','Required parameter requestParameters.updateMaintenanceTaskDto was null or undefined when calling maintenanceControllerUpdateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/maintenance/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMaintenanceTaskDtoToJSON(requestParameters.updateMaintenanceTaskDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaintenanceTaskFromJSON(jsonValue));
    }

    /**
     */
    async maintenanceControllerUpdateTask(requestParameters: MaintenanceControllerUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaintenanceTask> {
        const response = await this.maintenanceControllerUpdateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MaintenanceControllerListGuidesOrderByEnum = {
    Id: 'id',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Name: 'name',
    Content: 'content',
    VehicleId: 'vehicleId'
} as const;
export type MaintenanceControllerListGuidesOrderByEnum = typeof MaintenanceControllerListGuidesOrderByEnum[keyof typeof MaintenanceControllerListGuidesOrderByEnum];
/**
 * @export
 */
export const MaintenanceControllerListGuidesSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MaintenanceControllerListGuidesSortEnum = typeof MaintenanceControllerListGuidesSortEnum[keyof typeof MaintenanceControllerListGuidesSortEnum];
/**
 * @export
 */
export const MaintenanceControllerListTasksOrderByEnum = {
    Id: 'id',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Status: 'status',
    DueDate: 'dueDate',
    StartedAt: 'startedAt',
    CompletedAt: 'completedAt',
    Name: 'name',
    MachineHours: 'machineHours',
    Notes: 'notes',
    AssigneeId: 'assigneeId',
    VehicleId: 'vehicleId',
    GuideId: 'guideId'
} as const;
export type MaintenanceControllerListTasksOrderByEnum = typeof MaintenanceControllerListTasksOrderByEnum[keyof typeof MaintenanceControllerListTasksOrderByEnum];
/**
 * @export
 */
export const MaintenanceControllerListTasksSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type MaintenanceControllerListTasksSortEnum = typeof MaintenanceControllerListTasksSortEnum[keyof typeof MaintenanceControllerListTasksSortEnum];
