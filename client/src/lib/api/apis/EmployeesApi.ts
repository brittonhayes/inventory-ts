/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEmployeeDto,
  Employee,
  UpdateEmployeeDto,
} from '../models';
import {
    CreateEmployeeDtoFromJSON,
    CreateEmployeeDtoToJSON,
    EmployeeFromJSON,
    EmployeeToJSON,
    UpdateEmployeeDtoFromJSON,
    UpdateEmployeeDtoToJSON,
} from '../models';

export interface EmployeesControllerCreateEmployeeRequest {
    createEmployeeDto: CreateEmployeeDto;
}

export interface EmployeesControllerDeleteEmployeeRequest {
    id: string;
}

export interface EmployeesControllerFindEmployeeByIdRequest {
    id: string;
}

export interface EmployeesControllerListEmployeesRequest {
    name?: string;
    sort?: EmployeesControllerListEmployeesSortEnum;
}

export interface EmployeesControllerUpdateEmployeeRequest {
    id: string;
    updateEmployeeDto: UpdateEmployeeDto;
}

/**
 * 
 */
export class EmployeesApi extends runtime.BaseAPI {

    /**
     */
    async employeesControllerCreateEmployeeRaw(requestParameters: EmployeesControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.createEmployeeDto === null || requestParameters.createEmployeeDto === undefined) {
            throw new runtime.RequiredError('createEmployeeDto','Required parameter requestParameters.createEmployeeDto was null or undefined when calling employeesControllerCreateEmployee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmployeeDtoToJSON(requestParameters.createEmployeeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async employeesControllerCreateEmployee(requestParameters: EmployeesControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.employeesControllerCreateEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async employeesControllerDeleteEmployeeRaw(requestParameters: EmployeesControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling employeesControllerDeleteEmployee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async employeesControllerDeleteEmployee(requestParameters: EmployeesControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.employeesControllerDeleteEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async employeesControllerFindEmployeeByIdRaw(requestParameters: EmployeesControllerFindEmployeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling employeesControllerFindEmployeeById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async employeesControllerFindEmployeeById(requestParameters: EmployeesControllerFindEmployeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.employeesControllerFindEmployeeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async employeesControllerListEmployeesRaw(requestParameters: EmployeesControllerListEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Employee>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeFromJSON));
    }

    /**
     */
    async employeesControllerListEmployees(requestParameters: EmployeesControllerListEmployeesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Employee>> {
        const response = await this.employeesControllerListEmployeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async employeesControllerUpdateEmployeeRaw(requestParameters: EmployeesControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling employeesControllerUpdateEmployee.');
        }

        if (requestParameters.updateEmployeeDto === null || requestParameters.updateEmployeeDto === undefined) {
            throw new runtime.RequiredError('updateEmployeeDto','Required parameter requestParameters.updateEmployeeDto was null or undefined when calling employeesControllerUpdateEmployee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmployeeDtoToJSON(requestParameters.updateEmployeeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }

    /**
     */
    async employeesControllerUpdateEmployee(requestParameters: EmployeesControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Employee> {
        const response = await this.employeesControllerUpdateEmployeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const EmployeesControllerListEmployeesSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type EmployeesControllerListEmployeesSortEnum = typeof EmployeesControllerListEmployeesSortEnum[keyof typeof EmployeesControllerListEmployeesSortEnum];
