/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateLocationDto, LocationResponse, UpdateLocationDto } from '../models';
import {
	CreateLocationDtoFromJSON,
	CreateLocationDtoToJSON,
	LocationResponseFromJSON,
	LocationResponseToJSON,
	UpdateLocationDtoFromJSON,
	UpdateLocationDtoToJSON
} from '../models';

export interface LocationsControllerCreateRequest {
	createLocationDto: CreateLocationDto;
}

export interface LocationsControllerDeleteRequest {
	id: string;
}

export interface LocationsControllerFindByNameRequest {
	id: string;
}

export interface LocationsControllerListRequest {
	name?: string;
	orderBy?: LocationsControllerListOrderByEnum;
	sort?: LocationsControllerListSortEnum;
}

export interface LocationsControllerUpdateRequest {
	id: string;
	updateLocationDto: UpdateLocationDto;
}

/**
 *
 */
export class LocationsApi extends runtime.BaseAPI {
	/**
	 */
	async locationsControllerCreateRaw(
		requestParameters: LocationsControllerCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<LocationResponse>> {
		if (requestParameters.createLocationDto === null || requestParameters.createLocationDto === undefined) {
			throw new runtime.RequiredError(
				'createLocationDto',
				'Required parameter requestParameters.createLocationDto was null or undefined when calling locationsControllerCreate.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/api/locations`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: CreateLocationDtoToJSON(requestParameters.createLocationDto)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
	}

	/**
	 */
	async locationsControllerCreate(
		requestParameters: LocationsControllerCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<LocationResponse> {
		const response = await this.locationsControllerCreateRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async locationsControllerDeleteRaw(
		requestParameters: LocationsControllerDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<LocationResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling locationsControllerDelete.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
	}

	/**
	 */
	async locationsControllerDelete(
		requestParameters: LocationsControllerDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<LocationResponse> {
		const response = await this.locationsControllerDeleteRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async locationsControllerFindByNameRaw(
		requestParameters: LocationsControllerFindByNameRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<LocationResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling locationsControllerFindByName.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
	}

	/**
	 */
	async locationsControllerFindByName(
		requestParameters: LocationsControllerFindByNameRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<LocationResponse> {
		const response = await this.locationsControllerFindByNameRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async locationsControllerListRaw(
		requestParameters: LocationsControllerListRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
		const queryParameters: any = {};

		if (requestParameters.name !== undefined) {
			queryParameters['name'] = requestParameters.name;
		}

		if (requestParameters.orderBy !== undefined) {
			queryParameters['orderBy'] = requestParameters.orderBy;
		}

		if (requestParameters.sort !== undefined) {
			queryParameters['sort'] = requestParameters.sort;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/api/locations`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationResponseFromJSON));
	}

	/**
	 */
	async locationsControllerList(
		requestParameters: LocationsControllerListRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<LocationResponse>> {
		const response = await this.locationsControllerListRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async locationsControllerUpdateRaw(
		requestParameters: LocationsControllerUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<LocationResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling locationsControllerUpdate.'
			);
		}

		if (requestParameters.updateLocationDto === null || requestParameters.updateLocationDto === undefined) {
			throw new runtime.RequiredError(
				'updateLocationDto',
				'Required parameter requestParameters.updateLocationDto was null or undefined when calling locationsControllerUpdate.'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/api/locations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: UpdateLocationDtoToJSON(requestParameters.updateLocationDto)
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
	}

	/**
	 */
	async locationsControllerUpdate(
		requestParameters: LocationsControllerUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<LocationResponse> {
		const response = await this.locationsControllerUpdateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}

/**
 * @export
 */
export const LocationsControllerListOrderByEnum = {
	Id: 'id',
	Name: 'name',
	CreatedAt: 'createdAt',
	UpdatedAt: 'updatedAt'
} as const;
export type LocationsControllerListOrderByEnum =
	typeof LocationsControllerListOrderByEnum[keyof typeof LocationsControllerListOrderByEnum];
/**
 * @export
 */
export const LocationsControllerListSortEnum = {
	Asc: 'asc',
	Desc: 'desc'
} as const;
export type LocationsControllerListSortEnum =
	typeof LocationsControllerListSortEnum[keyof typeof LocationsControllerListSortEnum];
