/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEquipmentDto,
  EquipmentResponse,
  UpdateEquipmentDto,
} from '../models';
import {
    CreateEquipmentDtoFromJSON,
    CreateEquipmentDtoToJSON,
    EquipmentResponseFromJSON,
    EquipmentResponseToJSON,
    UpdateEquipmentDtoFromJSON,
    UpdateEquipmentDtoToJSON,
} from '../models';

export interface EquipmentControllerCreateRequest {
    createEquipmentDto: CreateEquipmentDto;
}

export interface EquipmentControllerDeleteRequest {
    id: string;
}

export interface EquipmentControllerFindByIdRequest {
    id: string;
}

export interface EquipmentControllerListRequest {
    name?: string;
    orderBy?: EquipmentControllerListOrderByEnum;
    sort?: EquipmentControllerListSortEnum;
}

export interface EquipmentControllerUpdateRequest {
    id: string;
    updateEquipmentDto: UpdateEquipmentDto;
}

/**
 * 
 */
export class EquipmentApi extends runtime.BaseAPI {

    /**
     */
    async equipmentControllerCreateRaw(requestParameters: EquipmentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentResponse>> {
        if (requestParameters.createEquipmentDto === null || requestParameters.createEquipmentDto === undefined) {
            throw new runtime.RequiredError('createEquipmentDto','Required parameter requestParameters.createEquipmentDto was null or undefined when calling equipmentControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/equipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEquipmentDtoToJSON(requestParameters.createEquipmentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentResponseFromJSON(jsonValue));
    }

    /**
     */
    async equipmentControllerCreate(requestParameters: EquipmentControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentResponse> {
        const response = await this.equipmentControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async equipmentControllerDeleteRaw(requestParameters: EquipmentControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling equipmentControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentResponseFromJSON(jsonValue));
    }

    /**
     */
    async equipmentControllerDelete(requestParameters: EquipmentControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentResponse> {
        const response = await this.equipmentControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async equipmentControllerFindByIdRaw(requestParameters: EquipmentControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling equipmentControllerFindById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentResponseFromJSON(jsonValue));
    }

    /**
     */
    async equipmentControllerFindById(requestParameters: EquipmentControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentResponse> {
        const response = await this.equipmentControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async equipmentControllerListRaw(requestParameters: EquipmentControllerListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/equipment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async equipmentControllerList(requestParameters: EquipmentControllerListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.equipmentControllerListRaw(requestParameters, initOverrides);
    }

    /**
     */
    async equipmentControllerUpdateRaw(requestParameters: EquipmentControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling equipmentControllerUpdate.');
        }

        if (requestParameters.updateEquipmentDto === null || requestParameters.updateEquipmentDto === undefined) {
            throw new runtime.RequiredError('updateEquipmentDto','Required parameter requestParameters.updateEquipmentDto was null or undefined when calling equipmentControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEquipmentDtoToJSON(requestParameters.updateEquipmentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentResponseFromJSON(jsonValue));
    }

    /**
     */
    async equipmentControllerUpdate(requestParameters: EquipmentControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentResponse> {
        const response = await this.equipmentControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const EquipmentControllerListOrderByEnum = {
    Id: 'id',
    Name: 'name',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    Condition: 'condition',
    TagName: 'tagName',
    LocationId: 'locationId'
} as const;
export type EquipmentControllerListOrderByEnum = typeof EquipmentControllerListOrderByEnum[keyof typeof EquipmentControllerListOrderByEnum];
/**
 * @export
 */
export const EquipmentControllerListSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type EquipmentControllerListSortEnum = typeof EquipmentControllerListSortEnum[keyof typeof EquipmentControllerListSortEnum];
