/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Power } from './Power';
import {
    PowerFromJSON,
    PowerFromJSONTyped,
    PowerToJSON,
} from './Power';
import type { VehicleType } from './VehicleType';
import {
    VehicleTypeFromJSON,
    VehicleTypeFromJSONTyped,
    VehicleTypeToJSON,
} from './VehicleType';

/**
 * 
 * @export
 * @interface UpdateVehicleDto
 */
export interface UpdateVehicleDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleDto
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof UpdateVehicleDto
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateVehicleDto
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleDto
     */
    vin?: string;
    /**
     * 
     * @type {VehicleType}
     * @memberof UpdateVehicleDto
     */
    vehicleType?: VehicleType;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleDto
     */
    make?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleDto
     */
    model?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateVehicleDto
     */
    machineHours?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateVehicleDto
     */
    link?: string;
    /**
     * 
     * @type {Power}
     * @memberof UpdateVehicleDto
     */
    power?: Power;
}

/**
 * Check if a given object implements the UpdateVehicleDto interface.
 */
export function instanceOfUpdateVehicleDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateVehicleDtoFromJSON(json: any): UpdateVehicleDto {
    return UpdateVehicleDtoFromJSONTyped(json, false);
}

export function UpdateVehicleDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateVehicleDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'vin': !exists(json, 'vin') ? undefined : json['vin'],
        'vehicleType': !exists(json, 'vehicleType') ? undefined : VehicleTypeFromJSON(json['vehicleType']),
        'make': !exists(json, 'make') ? undefined : json['make'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'machineHours': !exists(json, 'machineHours') ? undefined : json['machineHours'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'power': !exists(json, 'power') ? undefined : PowerFromJSON(json['power']),
    };
}

export function UpdateVehicleDtoToJSON(value?: UpdateVehicleDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'vin': value.vin,
        'vehicleType': VehicleTypeToJSON(value.vehicleType),
        'make': value.make,
        'model': value.model,
        'machineHours': value.machineHours,
        'link': value.link,
        'power': PowerToJSON(value.power),
    };
}

