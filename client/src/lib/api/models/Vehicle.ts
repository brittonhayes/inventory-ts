/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MaintenanceGuide } from './MaintenanceGuide';
import {
    MaintenanceGuideFromJSON,
    MaintenanceGuideFromJSONTyped,
    MaintenanceGuideToJSON,
} from './MaintenanceGuide';
import type { MaintenanceTask } from './MaintenanceTask';
import {
    MaintenanceTaskFromJSON,
    MaintenanceTaskFromJSONTyped,
    MaintenanceTaskToJSON,
} from './MaintenanceTask';
import type { Power } from './Power';
import {
    PowerFromJSON,
    PowerFromJSONTyped,
    PowerToJSON,
} from './Power';
import type { VehiclePart } from './VehiclePart';
import {
    VehiclePartFromJSON,
    VehiclePartFromJSONTyped,
    VehiclePartToJSON,
} from './VehiclePart';
import type { VehicleType } from './VehicleType';
import {
    VehicleTypeFromJSON,
    VehicleTypeFromJSONTyped,
    VehicleTypeToJSON,
} from './VehicleType';

/**
 * 
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Vehicle
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Vehicle
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    vin?: string;
    /**
     * 
     * @type {VehicleType}
     * @memberof Vehicle
     */
    vehicleType: VehicleType;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    make: string;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    model: string;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    machineHours?: number;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    link?: string;
    /**
     * 
     * @type {Power}
     * @memberof Vehicle
     */
    power: Power;
    /**
     * 
     * @type {Array<MaintenanceTask>}
     * @memberof Vehicle
     */
    tasks: Array<MaintenanceTask>;
    /**
     * 
     * @type {Array<MaintenanceGuide>}
     * @memberof Vehicle
     */
    guides: Array<MaintenanceGuide>;
    /**
     * 
     * @type {Array<VehiclePart>}
     * @memberof Vehicle
     */
    parts: Array<VehiclePart>;
}

/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "vehicleType" in value;
    isInstance = isInstance && "make" in value;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "power" in value;
    isInstance = isInstance && "tasks" in value;
    isInstance = isInstance && "guides" in value;
    isInstance = isInstance && "parts" in value;

    return isInstance;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'vin': !exists(json, 'vin') ? undefined : json['vin'],
        'vehicleType': VehicleTypeFromJSON(json['vehicleType']),
        'make': json['make'],
        'model': json['model'],
        'machineHours': !exists(json, 'machineHours') ? undefined : json['machineHours'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'power': PowerFromJSON(json['power']),
        'tasks': ((json['tasks'] as Array<any>).map(MaintenanceTaskFromJSON)),
        'guides': ((json['guides'] as Array<any>).map(MaintenanceGuideFromJSON)),
        'parts': ((json['parts'] as Array<any>).map(VehiclePartFromJSON)),
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'vin': value.vin,
        'vehicleType': VehicleTypeToJSON(value.vehicleType),
        'make': value.make,
        'model': value.model,
        'machineHours': value.machineHours,
        'link': value.link,
        'power': PowerToJSON(value.power),
        'tasks': ((value.tasks as Array<any>).map(MaintenanceTaskToJSON)),
        'guides': ((value.guides as Array<any>).map(MaintenanceGuideToJSON)),
        'parts': ((value.parts as Array<any>).map(VehiclePartToJSON)),
    };
}

