/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Employee } from './Employee';
import {
    EmployeeFromJSON,
    EmployeeFromJSONTyped,
    EmployeeToJSON,
} from './Employee';
import type { MaintenanceGuide } from './MaintenanceGuide';
import {
    MaintenanceGuideFromJSON,
    MaintenanceGuideFromJSONTyped,
    MaintenanceGuideToJSON,
} from './MaintenanceGuide';
import type { TaskStatus } from './TaskStatus';
import {
    TaskStatusFromJSON,
    TaskStatusFromJSONTyped,
    TaskStatusToJSON,
} from './TaskStatus';
import type { Tool } from './Tool';
import {
    ToolFromJSON,
    ToolFromJSONTyped,
    ToolToJSON,
} from './Tool';
import type { Vehicle } from './Vehicle';
import {
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';

/**
 * 
 * @export
 * @interface MaintenanceTask
 */
export interface MaintenanceTask {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceTask
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceTask
     */
    updatedAt: Date;
    /**
     * 
     * @type {TaskStatus}
     * @memberof MaintenanceTask
     */
    status: TaskStatus;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceTask
     */
    dueDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceTask
     */
    startedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceTask
     */
    completedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof MaintenanceTask
     */
    machineHours?: number;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    notes?: string;
    /**
     * 
     * @type {Array<Tool>}
     * @memberof MaintenanceTask
     */
    tools?: Array<Tool>;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    assigneeId?: string;
    /**
     * 
     * @type {Employee}
     * @memberof MaintenanceTask
     */
    assignee?: Employee;
    /**
     * 
     * @type {Vehicle}
     * @memberof MaintenanceTask
     */
    vehicle?: Vehicle;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    vehicleId?: string;
    /**
     * 
     * @type {MaintenanceGuide}
     * @memberof MaintenanceTask
     */
    guide?: MaintenanceGuide;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceTask
     */
    guideId?: string;
}

/**
 * Check if a given object implements the MaintenanceTask interface.
 */
export function instanceOfMaintenanceTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "dueDate" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function MaintenanceTaskFromJSON(json: any): MaintenanceTask {
    return MaintenanceTaskFromJSONTyped(json, false);
}

export function MaintenanceTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): MaintenanceTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'status': TaskStatusFromJSON(json['status']),
        'dueDate': (new Date(json['dueDate'])),
        'startedAt': !exists(json, 'startedAt') ? undefined : (new Date(json['startedAt'])),
        'completedAt': !exists(json, 'completedAt') ? undefined : (new Date(json['completedAt'])),
        'name': json['name'],
        'machineHours': !exists(json, 'machineHours') ? undefined : json['machineHours'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'tools': !exists(json, 'tools') ? undefined : ((json['tools'] as Array<any>).map(ToolFromJSON)),
        'assigneeId': !exists(json, 'assigneeId') ? undefined : json['assigneeId'],
        'assignee': !exists(json, 'assignee') ? undefined : EmployeeFromJSON(json['assignee']),
        'vehicle': !exists(json, 'vehicle') ? undefined : VehicleFromJSON(json['vehicle']),
        'vehicleId': !exists(json, 'vehicleId') ? undefined : json['vehicleId'],
        'guide': !exists(json, 'guide') ? undefined : MaintenanceGuideFromJSON(json['guide']),
        'guideId': !exists(json, 'guideId') ? undefined : json['guideId'],
    };
}

export function MaintenanceTaskToJSON(value?: MaintenanceTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'status': TaskStatusToJSON(value.status),
        'dueDate': (value.dueDate.toISOString()),
        'startedAt': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'completedAt': value.completedAt === undefined ? undefined : (value.completedAt.toISOString()),
        'name': value.name,
        'machineHours': value.machineHours,
        'notes': value.notes,
        'tools': value.tools === undefined ? undefined : ((value.tools as Array<any>).map(ToolToJSON)),
        'assigneeId': value.assigneeId,
        'assignee': EmployeeToJSON(value.assignee),
        'vehicle': VehicleToJSON(value.vehicle),
        'vehicleId': value.vehicleId,
        'guide': MaintenanceGuideToJSON(value.guide),
        'guideId': value.guideId,
    };
}

