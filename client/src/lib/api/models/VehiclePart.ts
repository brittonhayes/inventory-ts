/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Condition } from './Condition';
import {
    ConditionFromJSON,
    ConditionFromJSONTyped,
    ConditionToJSON,
} from './Condition';
import type { Vehicle } from './Vehicle';
import {
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';

/**
 * 
 * @export
 * @interface VehiclePart
 */
export interface VehiclePart {
    /**
     * 
     * @type {string}
     * @memberof VehiclePart
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof VehiclePart
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof VehiclePart
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof VehiclePart
     */
    name: string;
    /**
     * 
     * @type {Condition}
     * @memberof VehiclePart
     */
    condition?: Condition;
    /**
     * 
     * @type {number}
     * @memberof VehiclePart
     */
    hours?: number;
    /**
     * 
     * @type {string}
     * @memberof VehiclePart
     */
    notes?: string;
    /**
     * 
     * @type {Vehicle}
     * @memberof VehiclePart
     */
    vehicle?: Vehicle;
    /**
     * 
     * @type {string}
     * @memberof VehiclePart
     */
    vehicleId?: string;
}

/**
 * Check if a given object implements the VehiclePart interface.
 */
export function instanceOfVehiclePart(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function VehiclePartFromJSON(json: any): VehiclePart {
    return VehiclePartFromJSONTyped(json, false);
}

export function VehiclePartFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehiclePart {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'name': json['name'],
        'condition': !exists(json, 'condition') ? undefined : ConditionFromJSON(json['condition']),
        'hours': !exists(json, 'hours') ? undefined : json['hours'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'vehicle': !exists(json, 'vehicle') ? undefined : VehicleFromJSON(json['vehicle']),
        'vehicleId': !exists(json, 'vehicleId') ? undefined : json['vehicleId'],
    };
}

export function VehiclePartToJSON(value?: VehiclePart | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'name': value.name,
        'condition': ConditionToJSON(value.condition),
        'hours': value.hours,
        'notes': value.notes,
        'vehicle': VehicleToJSON(value.vehicle),
        'vehicleId': value.vehicleId,
    };
}

