/* tslint:disable */
/* eslint-disable */
/**
 * Open Farms Inventory Service
 * Agriculture inventory management service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MaintenanceTask } from './MaintenanceTask';
import {
    MaintenanceTaskFromJSON,
    MaintenanceTaskFromJSONTyped,
    MaintenanceTaskToJSON,
} from './MaintenanceTask';
import type { Vehicle } from './Vehicle';
import {
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';

/**
 * 
 * @export
 * @interface MaintenanceGuide
 */
export interface MaintenanceGuide {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceGuide
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceGuide
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceGuide
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceGuide
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceGuide
     */
    content: string;
    /**
     * 
     * @type {Array<MaintenanceTask>}
     * @memberof MaintenanceGuide
     */
    tasks: Array<MaintenanceTask>;
    /**
     * 
     * @type {Vehicle}
     * @memberof MaintenanceGuide
     */
    vehicle?: Vehicle;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceGuide
     */
    vehicleId?: string;
}

/**
 * Check if a given object implements the MaintenanceGuide interface.
 */
export function instanceOfMaintenanceGuide(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "tasks" in value;

    return isInstance;
}

export function MaintenanceGuideFromJSON(json: any): MaintenanceGuide {
    return MaintenanceGuideFromJSONTyped(json, false);
}

export function MaintenanceGuideFromJSONTyped(json: any, ignoreDiscriminator: boolean): MaintenanceGuide {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'name': json['name'],
        'content': json['content'],
        'tasks': ((json['tasks'] as Array<any>).map(MaintenanceTaskFromJSON)),
        'vehicle': !exists(json, 'vehicle') ? undefined : VehicleFromJSON(json['vehicle']),
        'vehicleId': !exists(json, 'vehicleId') ? undefined : json['vehicleId'],
    };
}

export function MaintenanceGuideToJSON(value?: MaintenanceGuide | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'name': value.name,
        'content': value.content,
        'tasks': ((value.tasks as Array<any>).map(MaintenanceTaskToJSON)),
        'vehicle': VehicleToJSON(value.vehicle),
        'vehicleId': value.vehicleId,
    };
}

